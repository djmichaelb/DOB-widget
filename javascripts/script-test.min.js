$(document).ready(function() {

    var dobHandler = function() {
        
        var maxPossibleDays = 31; //max number of days in ANY month
        var maxPossibleMonths = 12; //max number of months in ANY year
        now = new Date() // current date (day, month, year)
        var currentYear = now.getFullYear(); //current year
        var currentMonth = now.getMonth(); //current month
        var currentDay = now.getDay(); //current day
        var minPossibleYears = currentYear - 111; //year someone 111 yrs old was born
        var remainderYears = currentYear - 2000; //years since yr 2000 (used for autoAppender)
        var validationShowing = false; //track the showing of validation messages to avoid duplicates
        var newFocus;

        var keyMapping = { //maps keypress values to numerals
            'n48': 0,
            'n49': 1,
            'n50': 2,
            'n51': 3,
            'n52': 4,
            'n53': 5,
            'n54': 6,
            'n55': 7,
            'n56': 8,
            'n57': 9
        };

        var monthMapping = { //maps days in each month
            'm01': 31,
            'm02': 29, //this is the leap year length... see below
            'm03': 31,
            'm04': 30,
            'm05': 31,
            'm06': 30,
            'm07': 31,
            'm08': 31,
            'm09': 30,
            'm10': 31,
            'm11': 30,
            'm12': 31,
            'm13': 28 //13th month is Feb during a non-leap year
        }

        var monthNames = {
            'm01': 'Jan',
            'm02': 'Feb', //this is the leap year length... see below
            'm03': 'Mar',
            'm04': 'Apr',
            'm05': 'May',
            'm06': 'Jun',
            'm07': 'Jul',
            'm08': 'Aug',
            'm09': 'Sep',
            'm10': 'Oct',
            'm11': 'Nov',
            'm12': 'Dec',
            'm13': 'Feb'
        }

        var init = function() {
            //initialise the elements within the Date of Birth area
            //add hover states to the field
            // run over each field on init and add 0's to
            // all field with single digit numbers
            $('.dob-wrapper').on('focus', function(event) {
                console.log('focussed on dob-wrapper');
            })
            $('.dob-wrapper input').each(function(event){
                // bind focus and blur functions to each field.
                $(this).on('focus', function(event) {
                    $(this).parent('.dob-wrapper').addClass('focus'); 
                    $(this).val(autoAppender($(this).val(), 'strip'));
                    this.selectionStart = this.selectionEnd = this.value.length;
                    newFocus = $(this).attr('id');
                }).on('blur', function(event) {
                    $(this).val(autoAppender($(this).val(), $(this).attr('id')));
                    $(this).parent('.dob-wrapper').removeClass('focus')

                }).on('keydown', function(event) {
                    restrictInput(this, $(this).attr('id'), event);
                });
                $(this).val(autoAppender($(this).val()));
            });
        }
        
        var checkOnBlur = function(element) {


        }


        var showValidationError = function(message) {
            if (!validationShowing) {
                validationShowing = true;
                $('.dob .validation').hide().html('<span>'+ message +'</span>')
                $('.dob .validation').fadeIn('fast', function() {
                    $('.dob-wrapper').addClass('error');
                    $(this).delay(2000).fadeOut('fast', function() {
                        $(this).html('');
                        $('.dob-wrapper').removeClass('error');
                        validationShowing = false;
                    });
                });
            }
        }

        var isLeapYear = function(year) {
            // function to determine if a supplied year is a leap year
            // returns boolean. true = is a leap year
            if ((parseInt(year)%4) == 0) {
                if (parseInt(year)%100 == 0) {
                    if (parseInt(year)%400 != 0) {
                        return false;
                    } else {
                        return true;
                    }
                } return true;
            } else {
                return false;
            }
        }

        var autoAppender = function(testValue, type) {
            // check to see if the contents of the field is a number
            // below 10 and if true, add a '0' to the front of the number
            // or strip a 0 from a number below 10 if required
            numTestValue = parseInt(testValue)
            if (type == 'dob-day' || type == 'dob-month' || !type) {
                if (testValue && (0 < numTestValue && numTestValue < 10)) {
                    return '0' + numTestValue;
                } else if (numTestValue) {
                    return numTestValue;
                } else {
                    return testValue;
                }
            } else if (type == 'dob-year') {
                //check to see if the year is less than 3 chars long, and if
                // true return a guess at the century as either 2000 or 1900
                // based on the number of years since 2000.
                if (!testValue || testValue.length > 2) {
                    return testValue;
                } else {
                    switch (true) {
                        case (numTestValue < 10):
                            return "200" + numTestValue;
                            break;
                        case (numTestValue <= remainderYears):
                            return "20" + numTestValue;
                            break;
                        default:
                            return "19" + numTestValue;
                            break;
                    }
                }
            } else {
                // type = strip or true
                if (testValue && numTestValue < 10) {
                    return numTestValue;
                } else {
                    return testValue;
                }
            }
        }

        var checkForBackTab = function(element, event, type) {
            // check if the current field (type) has content
            // and if not, move back to the previous field
            // when the backspace key is pressed
            if (type == 'dob-month' && $(element).val().length < 1) {
                $('#dob-day').focus();
                event.preventDefault();
            } else if (type == 'dob-year' && $(element).val().length < 1) {
                $('#dob-month').focus();
                event.preventDefault();
            } else {
                return;
            }
        }

        var checkValidDays = function(days) {
            // checks the maximum number of days in a given month
            // on a given year or returns the max possible (31)
            month = $('#dob-month').val();
            year  = $('#dob-year').val();
            days = parseInt(days);

            if (!month) {
                if (0 < days && days <= maxPossibleDays) {
                    return true;
                } else {
                    showValidationError('Invalid day');
                    return false;
                }   
            } else if (month == '02' && year) {
                if (isLeapYear(year)) {
                    if (days <= monthMapping['m02']) {
                        return true;
                    } else {
                        showValidationError('Invalid - only ' + monthMapping['m02'] + ' days in ' + monthNames["m02"] + ' ' + year);
                        return false;
                    }
                } else {
                    if (days <= monthMapping['m02']) {
                        return true;
                    } else if (days == 29) {
                        showValidationError('Invalid - only 28 days in ' + monthNames["m02"] + ' ' + year);
                        return false;
                    } else {
                        showValidationError('Invalid day');
                        return false
                    }
                }
            } else {
                if (days <= monthMapping['m' + month]) {
                    return true;
                } else {
                    showValidationError('Invalid - only ' + monthMapping['m' + month] + ' days in ' + monthNames['m' + month] + ' ' + year);
                    return false;
                }
            }
        }

        var checkValidMonth = function(month) {
            // checks the month entered is a valid month
            // considering the year and day entered (if any)
            days  = $('#dob-day').val();
            year  = $('#dob-year').val();
            month = autoAppender(String(month), 'dob-month');
            
            if (!days) {
                // no days to validate against, return maxPossibleMonths
                return (parseInt(month) <= maxPossibleMonths) ? true : false;
            } else if ((month == '02' && !year) || 
                       (month == '02' && isLeapYear(parseInt(year)))) {
                // month is Feb, no year supplied, or is leap year, return 29
                if (parseInt(days) <= monthMapping["m02"]) {
                    return true;
                } else {
                    showValidationError('There are not ' + days + ' days in Feb.');
                    return false;
                }
            } else if (month == '02') {
                // month is Feb, we know the year, and it's not a leap year
                // return 28
                if (parseInt(days) > monthMapping["m13"]) {
                    showValidationError('Feb only has 28 days in ' + year);
                    return false;
                } else {
                    return true;
                }
            } else {
                // return the validation for the month entered
                if (parseInt(days) <= monthMapping["m" + month]) {
                    return true;
                } else {
                    showValidationError('Invalid month');
                    return false;
                } 
            }

        }

        var checkValidYear = function(year) {
            //because of the validation code, this should always 
            //receive a 4 digit year as input

            days = $('#dob-day').val();
            month = $('#dob-month').val();

            if (month == '02' && days == '29') {
                if (isLeapYear(year)) {
                    return true;
                } else {
                    showValidationError(year + ' was not a leap year');
                    return false;
                }
            } else if ((parseInt(year) <= minPossibleYears) || 
                       (currentYear < parseInt(year))) {
                showValidationError('Invalid year');
                return false;
            } else if (parseInt(year) == currentYear) {
                if (parseInt(month) > currentMonth) {
                    showValidationError('Invalid year');
                    return false;
                } else if (parseInt(month) == currentMonth) {
                    if (parseInt(days) > currentDay) {
                        showValidationError('Invalid year');
                        return false;
                    }
                }
                return true;
            } else {
                return true;
            }

        }
      
        var restrictInput  = function(element, type, event) {
            //this function should restrict the input on certain fields
            //to only numbers, and navigation keys.
            //source: http://stackoverflow.com/questions/891696/jquery-what-is-the-best-way-to-restrict-number-only-input-for-textboxes-all
            console.log('inside restrictInput on ' + $(element).attr('id'))
            var controlKeys = [8, 9, 13, 35, 36, 37, 39, 110, 190];
            var isControlKey = controlKeys.join(",").match(new RegExp(event.which));
            if (!event.which || isControlKey) {
                // one of the control keys pressed
                if (event.which == 8) {
                    // backspace pressed, check to tab backwards
                    checkForBackTab(element, event, type);
                    return;
                } else {
                    return;
                }
            } else if (48 <= event.which && event.which <= 57) {
                // numerical key from 0 to 9 pressed
                if (newFocus == $(element).attr('id')) {
                    currentInput = '';
                    newFocus = '';
                } else {
                    currentInput = $(element).val();
                }
                newInput = String(currentInput) + keyMapping['n' + event.which];
                console.log('newInput = ' + newInput);
                testInputContents(element, newInput, type);
                return;
            } else {
                // some other key pressed
                if (event.which && event.which != 16) {
                    showValidationError('Only numbers allowed')
                }
                event.preventDefault();
                return;
                // maybe show a numbers only validation error?
            }
        }


        var testInputContents = function(element, newInput, type) {
            // look up the key pressed and the field it's in
            // and test to see if the number is valid
            // allow valid inputs, deny invalid ones
            if (type == 'dob-day') {
                // validate the input of the day field
                switch (newInput.length) {
                    case 1: //no previous input
                        if (4 <= newInput && newInput <= 9) { //number greater than 3
                            $(element).val(newInput); //enter digit
                            $('#dob-month').focus(); //jump straight to month field
                            event.preventDefault(); //stop double entry
                        } else {
                            return;
                        }
                        break;

                    case 2: //number previously inserted
                        if (checkValidDays(parseInt(newInput))) {
                            $(element).val(newInput);
                            $('#dob-month').focus();
                        }
                        event.preventDefault();
                        break;

                    case 3: //already contained 2 numbers
                        $(element).val('');
                        break;

                    default:
                        event.preventDefault();
                        break;
                }
                return;
            } else if (type == 'dob-month') {
                // validate the input of the month field
                switch (newInput.length) {
                    case 1: // no previous input
                        if (2 <= newInput && newInput <= 9) { //number greater than 1
                            if (checkValidMonth(parseInt(newInput))) {
                                // returns true if the month entered is allowed
                                // based on year and days entered (if any)
                                $(element).val(newInput);
                                $('#dob-year').focus();
                            } 
                            event.preventDefault(); //prevent keypress double firing
                        } else {
                            return;
                        }
                        break;

                    case 2: // there was a previous input
                        if (checkValidMonth(parseInt(newInput))) {
                            $(element).val(parseInt(newInput));
                            $('#dob-year').focus();
                        }
                        event.preventDefault();
                        break;

                    default:
                        event.preventDefault();
                        break;
                }
            } else { // type = 'dob-year'
                // validate the input of the year field
                switch (newInput.length) {
                    case 1: // no previous input
                        break;

                    case 2:
                        if ((parseInt(newInput) == 19) || (parseInt(newInput) == 20)) {
                            return; // keep allowing input
                        } else {
                            newInput = autoAppender(newInput, 'dob-year');
                            if (checkValidYear(newInput)) {
                                $(element).val(newInput);
                                $(element).blur();
                            }
                            event.preventDefault();
                        }
                        break;

                    case 3:
                        break;

                    case 4:
                        // test the year here
                        if (checkValidYear(parseInt(newInput))) {
                            // this year is valid
                            $(element).val(parseInt(newInput));
                            $(element).blur();
                        }
                        event.preventDefault();
                        break;

                    case 5:
                        // field already contains 4 digits
                        $(element).val('');
                        break;

                    default:
                        event.preventDefault()
                        break;
                }
            }
        }
        //call the init script
        init();
    }

    //test for the dob-wrapper element on the page and initialise the fields
    if ($('.dob-wrapper').length != 0) {
        dobHandler();
    }


});